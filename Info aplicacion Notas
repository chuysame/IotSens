Para ingresar al gestor de base de datos mongdb

iniciar el servicio de Mongo:
	sudo service mongod start
Inicia el servicio NODE desde /Escritorio/notes-app/src$:
	node index.js

para visualizar la base de datos Mongo ejecuta el programa ejecutable robo3t de la ruta:	
		/home/zagan/Documentos/Programas/robo3t-1.3.1-linux-x86_64-7419c406/bin/robo3t
abre las pestañas para visualizar los objetos JSON notes-db-app/collections/...

Ingresar a la aplicacion en un navegador con la siguinte direccion:
	http://localhost:3003/users/signinval

1.-En una terminal tipea
	mongo
2.-Para ingresara a la base de datos tipea:
	use "nombre de la base de datos" ej. use notes-db-app

3.-Para mostrar las colleccines tipea:
	show collections
4.-Para mostrar todos los datos de esa colleccion
	db."nombre de la collecion".find().pretty ej: db.notes.find().pretty


OTROS ENLACES DE INTERES:
adminMongo: plataforma web MIT javascript para manejar  mongoDB
https://github.com/mrvautin/adminMongo

DEPLOY EN RASPBERRY PI 3B:
Instala ubuntu server 18.04 arm64:
  https://ubuntu.com/download/raspberry-pi
Crear el archivo ssh sin extension en la raiz del sistema
Obtener el ip privado de la raspberry en el router agregando la ip del router 192.168.0.1 en un navegador
Encender y conectar la raspberry a internet mediante cable o wifi 
Abrir una consola en la laptop escribir ssh user@host y tipear la contraseña ej: ssh ubuntu@192.168.0.12
una vez conectado a la raspberry mediante ssh instalar node, npm y mongoDB y ejecutar 
  https://linuxize.com/post/how-to-install-node-js-on-raspberry-pi/
  https://developer.mongodb.com/how-to/mongodb-on-raspberry-pi
  systemctl enable mongodb.service 
para que el servicio de mongodb se inicie al iniciar el sistema
Crear una carpeta y clonar el repositorio chuysame/iotSens:
  git clone https://github.com/chuysame/iotSens
Instalar las dependencias para instalar los modulos con:
  npm install
Instalar de forma global:
  npm i express express-handlebars express-session method-override mongoose passport passport-local bcryptjs connect-flash
Probar la aplicacion con:
  npm run dev
Abrir los puertos 80, 443 y redireccionarlos a la ip privada de la raspberry 
Instalar nginx y configurarlo como reverse proxy para redirigir el trafico del puerto 80 y 443 al de la aplicacion node
  https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04
uso de sshfs:
https://www.linode.com/docs/guides/using-sshfs-on-linux/

para evitar el CG-Nat se recomienda usar dataplicity o remotei3:
    https://www.dataplicity.com/devices/42b594a9-8dea-4d95-873b-e9287d7c9b70/
    https://app.remote.it/#devices


REMOTEI3:
remotei3 permite varios tipos de conexion ssh, http, https, samba etc...

para hacer coneccion ssh local se utiliza la siguiente notacion:
  ssh <usuario>@<servidor> al estilo: ssh ubuntu@192.168.0.12
  ejemplo:  ssh ubuntu@proxy17.rt3.io -p 38909 

para hacer coneccion remota tipo sshfs:
  sshfs -p 38909 ubuntu@proxy17.rt3.io:/home/ubuntu/iotSens sshfs-dir 
  donde: -p significa  el puerto de remotei3 y proxy17.rt3.io el servidor(ambos parametros pueden cambiar), seguido de la ruta origen a modificar y la 
  carpeta local donde se almacena el bufer montado

DATAPLICITY:
  Asigna un dominio a tu aplicacion y permite ssh desde el navegador
https://docs.dataplicity.com/docs
