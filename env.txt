PORT_SERVERLOCAL = 3003
MONGODB_URI = mongodb://localhost/notes-db-app

PORT_BROKMQTT = 21973


//TODO: GET '/dasboard'********************************************************************
app.get('/dashboard', isAuthenticated, async (req,res)=>{ //usa isAuthenticated para consultar si el usuario esta logueado

var env_variables =     'PORT_SERVERLOCAL = 3003' + '\r\n' +
                        'MONGODB_URI = mongodb://localhost/notes-db-app' + '\r\n' +
                        'PORT_BROKMQTT = 21973' + '\r\n' + 'otro';

  fs.writeFile(path.join(__dirname, '../.env'), env_variables, function(err) {
     if (err) {
        return console.error(err);
     }
     console.log("Data written successfully!");

  });


  await res.redirect('../admin/index.html#source=dashboardSaved.json');
});


//*******************************************************************************************
app.post('/SetEnviroment', isAuthenticated, (req,res)=>{//recibe valores para asignar las variables de entorno desde una aplicacion web
/*  process.env.USERID = req.user.id;
  console.log('process.env.USERID:', process.env.USERID);
*/
  var logger = fs.createWriteStream(path.join(__dirname, '../.env'), {//abre un archivo manteniedolo a la espera de escritura
     flags: 'a' // 'a' means appending (old data will be preserved)
})

  logger.write('some data'+'\r\n') // append string to your file
  logger.write('more data'+'\r\n') // again
  logger.write('and more'+'\r\n') // again
  logger.end() // close string
  console.log('loger :',logger );

});


  fs.readFile(path.join(__dirname, '../.env'), (err, text) => {
  if (err){


  }else{
    console.log('text: ',text);
    //var text = "username=myusername\naddress=156a1355e3486f4\ndata=function(i){if (i!=0) return true; else return false;}";
    function getValueByKey(text, key){
        var regex = new RegExp("^" + key + "=(.*)$", "m");
        var match = regex.exec(text);
        if(match)
            return match[1];
        else
            return null;
    }

    console.log("MONGODB_URI: ", getValueByKey(text, "MONGODB_URI"));

  }

});

*****************************************************************************************


const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('../models/Users');

passport.use('local-signup',new LocalStrategy({
  usernameField: 'email'
}, async (email, password, done) => {
  // Match Email's User
  const user = await User.findOne({email: email});//Busca el usuario en la base de datos
  if (!user) {
    return done(null, false, { message: 'Not User found.' });
  } else {
    // Match Password's User
    const match = await user.matchPassword(password);
    if(match) {
			console.log('passwords iguales');
      return done(null, user);
    } else {
      return done(null, false, { message: 'Incorrect Password.' });
    }
  }
}));

//Pasport nesecita ser capaz de serializar y deserializar usuarios  para soportar inicios se de sesion persistentes

passport.serializeUser((user, done)=>{
  console.log('passport.serializeUser... user.id:',user.id);
	done(null, user.id);//almacena el id del susario logeado
});

passport.deserializeUser((id, done)=> {//toma el id retorna un usuario
	User.findById(id,(err, user)=>{
			done(err, user);
	});
});


************************Serializar desSerializar********************************

passport.serializeUser(function(user, done) {
  if (isUser(user)) {
    // serialize user
  } else if (isCompany(user)) {
    // serialize company
  }
});
aqui se hizo un cambio
